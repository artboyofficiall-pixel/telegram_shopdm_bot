import os
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –¢–æ–∫–µ–Ω—ã
API_TOKEN = os.getenv("BOT_TOKEN")
NP_API_KEY = os.getenv("NP_API_KEY")

if not API_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render ‚Üí Environment Variables")
if not NP_API_KEY:
    raise ValueError("‚ùå NP_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å –µ–≥–æ –≤ Render ‚Üí Environment Variables")

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("üí¨ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")],
        [KeyboardButton("‚ùì FAQ")]
    ],
    resize_keyboard=True
)

# üîπ –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ **–ó–ê–ú–Ü–°–¢–¨ –°–õ–Ü–í**.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è",
        reply_markup=main_menu
    )

# üîπ –ö–æ–Ω—Ç–∞–∫—Ç—ã
@dp.message_handler(lambda msg: msg.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer("üìç –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–¢–µ–ª–µ—Ñ–æ–Ω: +380XXXXXXXXX\nInstagram: @zamistsliv")

# üîπ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@dp.message_handler(lambda msg: msg.text == "üí¨ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def manager(message: types.Message):
    await message.answer("üë©‚Äçüíº –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @username_manager")

# üîπ FAQ
@dp.message_handler(lambda msg: msg.text == "‚ùì FAQ")
async def faq(message: types.Message):
    await message.answer(
        "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "‚Äî –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?\n–ß–µ—Ä–µ–∑ —Å–∞–π—Ç –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n\n"
        "‚Äî –ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑?\n–í—ã–±–µ—Ä–∏—Ç–µ ¬´üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–¢–ù.\n\n"
        "‚Äî –ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏?\n–ù–æ–≤–∞—è –ü–æ—á—Ç–∞ –∏ –£–∫—Ä–ø–æ—á—Ç–∞."
    )

# üîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda msg: msg.text == "üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def track_order(message: types.Message):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¢–¢–ù –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")

@dp.message_handler(lambda msg: msg.text.isdigit() and len(msg.text) >= 10)
async def check_ttn(message: types.Message):
    ttn = message.text.strip()

    # üîπ –ó–∞–ø—Ä–æ—Å –∫ API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã
    url = "https://api.novaposhta.ua/v2.0/json/"
    payload = {
        "apiKey": NP_API_KEY,
        "modelName": "TrackingDocument",
        "calledMethod": "getStatusDocuments",
        "methodProperties": {
            "Documents": [{"DocumentNumber": ttn}]
        }
    }

    try:
        response = requests.post(url, json=payload)
        data = response.json()

        if data.get("success") and data["data"]:
            status = data["data"][0].get("Status", "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await message.answer(f"üîé –¢–¢–ù: {ttn}\nüì¶ –°—Ç–∞—Ç—É—Å: {status}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É –¢–¢–ù.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

# üîπ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
